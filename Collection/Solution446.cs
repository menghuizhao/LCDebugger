namespace LCdebugger.Collection
{
    using System;
    using System.Collections.Generic;

    public class Solution446 : SolutionExecuter
    {
        private readonly int[] A;
        public Solution446(int[] A)
        {
            this.A = A;
        }
        public void Execute() {
            int ret = NumberOfArithmeticSlices(A);
            Console.WriteLine(ret);
        }
        public int NumberOfArithmeticSlices(int[] A)
        {
            if (A == null || A.Length < 3)
            {
                return 0;
            }
            int total = 0;
            Dictionary<int, Dictionary<long, int>> dict = new Dictionary<int, Dictionary<long, int>>();
            for (int i = 0; i < A.Length; i++)
            {
                Dictionary<long, int> endWithKeyDiffWithVal = new Dictionary<long, int>();
                dict.Add(i, endWithKeyDiffWithVal); // initialize
                for (int j = 0; j < i; j++)
                {
                    if ((long)A[i] - (long)A[j] > Int32.MaxValue || (long)A[i] - (long)A[j] < Int32.MinValue)
                    {
                        continue;
                    }
                    int count1 = 0; // end with A[j], difference is diff
                    long diff = (long)A[i] - (long)A[j];
                    if (dict[j].ContainsKey(diff))
                    {
                        count1 = dict[j][diff];
                    }

                    int count2 = 0; // end with A[i], difference is diff
                    if (dict[i].ContainsKey(diff))
                    {
                        count2 = dict[i][diff];
                    }
                    dict[i][diff] = count2 //accumlate those generates by previous "j"s
                                    + count1 // # of arithmetic generated by this "j"
                                    + 1; // 1st = a[j], 2nd = a[i], wait for 3rd =
                    total += count1;
                }
            }
            return total;
        }
    }
}
